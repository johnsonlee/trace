buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

allprojects {
    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            jcenter()
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile 'com.android.tools.build:gradle:1.5.0'
    compile 'com.android.tools.build:transform-api:1.5.0'

    compile 'commons-io:commons-io:2.4'
    compile 'org.javassist:javassist:3.20.0-GA'
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') && !project.POM_VERSION.endsWith('-SNAPSHOT') }
    sign configurations.archives
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.withXml {
                asNode().dependencies.'*'.findAll { it.groupId.text() == "com.android.tools.build" } each {
                    it.scope*.value = 'provided'
                }
            }

            pom.project {
                groupId POM_GROUP_ID
                artifactId POM_ARTIFACT_ID
                version POM_VERSION
                packaging POM_PACKAGING

                name POM_PROJECT_NAME
                description POM_PROJECT_DESCRIPTION
                url POM_PROJECT_URL
                inceptionYear POM_PROJECT_INCEPTION_YEAR

                organization {
                    name POM_ORG_NAME
                    url POM_ORG_URL
                }
                licenses {
                    license {
                        name POM_LICENSE_NAME
                        url POM_LICENSE_URL
                        distribution POM_LICENSE_DIST
                    }
                }
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                    tag POM_SCM_TAG
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                    }
                }
            }
            repository(url: OSSRH_RELEASE_REPOSITORY_URL) {
                authentication(userName: OSSRH_USERNAME, password: OSSRH_PASSWORD)
            }
            snapshotRepository(url: OSSRH_SNAPSHOT_REPOSITORY_URL) {
                authentication(userName: OSSRH_USERNAME, password: OSSRH_PASSWORD)
            }
        }
    }
}
